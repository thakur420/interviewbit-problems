/**
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).
You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9] insert and merge [2,5] would result in [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] would result in [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].
Make sure the returned intervals are also sorted.

problem link : https://www.interviewbit.com/problems/merge-intervals/
**/


/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
vector<Interval> Solution::insert(vector<Interval> &intervals, Interval newInterval) {
    int n=intervals.size();
    if(newInterval.start>newInterval.end){
        int temp=newInterval.start;
        newInterval.start=newInterval.end;
        newInterval.end=temp;
    }
    Interval merge;
    int i,j,overlap_start=-1,overlap_end=-1;
    for(i=0;i<n;i++)
        if(max(intervals[i].start,newInterval.start)<
                min(intervals[i].end,newInterval.end)){
            overlap_start=i;
            break;
        }
    for(j=i;j<n;j++){
        if(max(intervals[j].start,newInterval.start)>
                min(intervals[j].end,newInterval.end)){
            overlap_end=j-1;
            break;
        }
        else if((j==n-1)&&intervals[j].end>newInterval.end)
            overlap_end=n-1;
    }
    if(overlap_start==-1)
        merge.start= newInterval.start;
    else
        merge.start=min(intervals[overlap_start].start, newInterval.start);
    if(overlap_end==-1)
        merge.end=newInterval.end;
    else
        merge.end=max(intervals[overlap_end].end, newInterval.end);
    vector<Interval> sortedinterval;
    int k=-1,mergeadded=0;
    for(int i=0;i<n;i++)
        if(!mergeadded&&intervals[i].end<=merge.start){
            sortedinterval.push_back(intervals[i]);
            k++;
        }
        else if(mergeadded&&sortedinterval[k].end<=intervals[i].start){
            sortedinterval.push_back(intervals[i]);
            k++;
        }
        else if(!mergeadded){
           sortedinterval.push_back(merge);
           k++;
           i--;
           mergeadded=1;
        }
    if(mergeadded==0)
        sortedinterval.push_back(merge);
    return sortedinterval;
}
