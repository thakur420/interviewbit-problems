/**
Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example:
Given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6.
For this problem, return the maximum sum.

problem link : https://www.interviewbit.com/problems/max-sum-contiguous-subarray/

**/
int Solution::maxSubArray(const vector<int> &A) {
    int maxsum=A[0],currsum=A[0],size=A.size();
    for(int i=1;i<size;i++){
        if(A[i]>A[i]+currsum)
            currsum=A[i];
        else
            currsum+=A[i];
        if(currsum>maxsum)
            maxsum=currsum;
    }
    return maxsum;
}

