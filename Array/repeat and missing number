/**
You are given a read only array of n integers from 1 to n.
Each integer appears exactly once except A which appears twice and B which is missing.
Return A and B.
Note: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?
Note that in your output A should precede B.

Example:
Input:[3 1 2 5 3] 
Output:[3, 4] 
A = 3, B = 4

problem link : https://www.interviewbit.com/problems/repeat-and-missing-number-array/
**/
vector<int> Solution::repeatedNumber(const vector<int> &A) {
    long long size=A.size();
    vector<int> B(2);
    long long int sum=0,tot_sum=0,sq_sum=0,sum2=0;
    if(size%2==0){
        tot_sum =(size/2)*(size+1);
        if(size%3==0)
            sq_sum=((size/2)/3)*(size+1)*(2*size+1);
        else if((size+1)%3==0)
            sq_sum=(size/2)*((size+1)/3)*(2*size+1);
        else
            sq_sum=(size/2)*(size+1)*((2*size+1)/3);
    }
    else{
        tot_sum = ((size+1)/2)*size;
        if(size%3==0)
            sq_sum=(size/3)*((size+1)/2)*(2*size+1);
        else if((size+1)%3==0)
            sq_sum=size*(((size+1)/2)/3)*(2*size+1);
        else
            sq_sum=size*((size+1)/2)*((2*size+1)/3);
    }
    for(int i=0;i<size;i++)
        sum+=A[i]; 
    int diff = abs(sum-tot_sum);
    for(int i=0;i<size;i++)
        sum2+=(long long)A[i]*A[i]; 
    int add = abs(sum2-sq_sum)/diff;
    if(sum>tot_sum){
        B[0]=(diff+add)/2;
        B[1]=B[0]-diff;
    }
    else{
        B[1]=(diff+add)/2;
        B[0]=B[1]-diff;
    }
    return B;
}
