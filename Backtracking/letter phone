 /*Given a digit string, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below.
  
  Input: Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].

problem link : https://www.interviewbit.com/problems/letter-phone/
*/

void comb(string &A,vector<string> &B,string s,int l){
    if(l == A.length()){
        B.push_back(s);
        return ;
    }
    int n = (A[l]=='0'||A[l]=='1'?1:(A[l]=='9'||A[l]=='7'?4:3));
    for(int i = 0;i < n;i++){
        if(A[l]=='0')
            s.push_back('0');
        else if(A[l]=='1')
            s.push_back('1');
        else if(A[l]=='2'){
            if(i==0)
                s.push_back('a');
            else if(i==1)
                s.push_back('b');
            else
                s.push_back('c');
        }
        else if(A[l]=='3'){
            if(i==0)
                s.push_back('d');
            else if(i==1)
                s.push_back('e');
            else
                s.push_back('f');
        }
        else if(A[l]=='4'){
            if(i==0)
                s.push_back('g');
            else if(i==1)
                s.push_back('h');
            else
                s.push_back('i');
        }
        else if(A[l]=='5'){
            if(i==0)
                s.push_back('j');
            else if(i==1)
                s.push_back('k');
            else
                s.push_back('l');
        }
        else if(A[l]=='6'){
            if(i==0)
                s.push_back('m');
            else if(i==1)
                s.push_back('n');
            else
                s.push_back('o');
        }
        else if(A[l]=='7'){
            if(i==0)
                s.push_back('p');
            else if(i==1)
                s.push_back('q');
            else if(i==2)
                s.push_back('r');
            else
                s.push_back('s');
        }
        else if(A[l]=='8'){
            if(i==0)
                s.push_back('t');
            else if(i==1)
                s.push_back('u');
            else
                s.push_back('v');
        }
        else if(A[l]=='9'){
            if(i==0)
                s.push_back('w');
            else if(i==1)
                s.push_back('x');
            else if(i==2)
                s.push_back('y');
            else
                s.push_back('z');
        }
        comb(A,B,s,l+1);
        s.pop_back();
    }
}
vector<string> Solution::letterCombinations(string A) {
    vector<string> B;
    string temp;
    comb(A,B,temp,0);
    return B;
}

