/* Given a collection of numbers, return all possible permutations.

Example:

[1,2,3] will have the following permutations:

[1,2,3]
[1,3,2]
[2,1,3] 
[2,3,1] 
[3,1,2] 
[3,2,1]
*/
void swap(int &a,int &b){
    int temp = a;
    a = b;
    b = temp;
}
void compute_permutation(vector<int> &A,vector<vector<int>> &B,int i,int j){
    if(i == j){
        B.push_back(A);
        return ;
    }
    for(int k = i;k < j;k++){
        swap(A[i],A[k]);
        //cout<<"i = "<<i<<" j = "<<j<<" k = "<<k<<endl;
        compute_permutation(A,B,i+1,j);
        swap(A[i],A[k]);
        
    }
}
vector<vector<int> > Solution::permute(vector<int> &A) {
    vector<vector<int>> B;
    compute_permutation(A,B,0,A.size());
    return B;
}
