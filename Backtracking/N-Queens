/* The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens’ placement, where 'Q' and '.' 
both indicate a queen and an empty space respectively.

For example,
There exist two distinct solutions to the 4-queens puzzle:

[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]

problem link: https://www.interviewbit.com/problems/nqueens/
*/

bool isSafe(vector<int> &place,int row,int col){
    for(int i = 0;i < place.size()-1;i++){
        if(col == place[i])return false;
        if(abs(i - row) == abs(place[i]-col))return false;
    }
    return true;
}
void placequeen(int A,vector<vector<string>> &B,vector<int> &col,vector<string> &s,int row){
    if(A == col.size()){
        for(int i = 0;i < A;i++)
            s[i][col[i]]='Q';
        B.push_back(s);
        for(int i = 0;i < A;i++)
            s[i][col[i]]='.';
        return ;
    }
    for(int i =0;i < A;i++){
        col.push_back(i);
        if(isSafe(col,row,i))
            placequeen(A,B,col,s,row+1);
        col.pop_back();
    }
}
vector<vector<string> > Solution::solveNQueens(int A) {
    vector<vector<string>> queens;
    vector<string> s;
    string temp;
    vector<int> col;
    for(int i = 0;i < A;i++)
        temp.push_back('.');
    for(int i = 0;i < A;i++)
        s.push_back(temp);
    placequeen(A,queens,col,s,0);
    return queens;
}

