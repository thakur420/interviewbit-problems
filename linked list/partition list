/* Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5.
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* Solution::partition(ListNode* A, int B) {
    ListNode * start = A;
    bool addbeg = false;
    while(start->next && start->val < B && start->next->val < B){
        start = start->next;
    }
    ListNode *temp,*prev = nullptr,*next = nullptr;
    if(start->val < B)
        temp = start->next;
    else{
        temp = start;
        addbeg = true;
    }
    while(temp!=nullptr){
        if(temp->val < B){
            prev->next = temp->next;
            next = temp->next;
            if(addbeg){
                temp->next = A;
                A = start = temp;
                addbeg = false;
            }
            else{
                temp->next = start->next;
                start->next = temp;
                start = start->next;
            }
            temp = next;
        }
        else{
            prev = temp;
            temp = temp->next;
        }
    }
    return A;
}
