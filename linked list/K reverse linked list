/* Given a singly linked list and an integer K, reverses the nodes of the
list K at a time and returns modified linked list.

NOTE : The length of the list is divisible by K 
 
 Example :
Given linked list 1 -> 2 -> 3 -> 4 -> 5 -> 6 and K=2,
You should return 2 -> 1 -> 4 -> 3 -> 6 -> 5
problem link :https://www.interviewbit.com/problems/k-reverse-linked-list/
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* Solution::reverseList(ListNode* A, int B) {
    ListNode *curr = A,*prev = nullptr,*next = nullptr,*currstart = curr,*prevend = nullptr;
    bool head_modify = true;
    while(curr != nullptr){
        int k = B;
        while(curr && k--){
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        if(head_modify){
            A = prev;
            head_modify = false;
        }
        currstart->next = next;
        if(prevend)
            prevend->next = prev;
        prevend = currstart;
        prev = nullptr;
        currstart = curr;
    }
    return A;
}
