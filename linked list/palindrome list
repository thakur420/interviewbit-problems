/* Given a singly linked list, determine if its a palindrome. Return 1 or 0 denoting if its a palindrome or not, respectively.

Expected solution is linear in time and constant in space.

For example,
List 1-->2-->1 is a palindrome.
List 1-->2-->3 is not a palindrome.

*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
int Solution::lPalin(ListNode* A) {
    int n = 0;
    ListNode *temp = A;
    while(temp!=nullptr){
        n++;
        temp = temp->next;
    }
    if(n == 0 || n == 1)
        return 1;
    int z = n/2;
    ListNode *prev = nullptr,*curr = A,*next = nullptr;
    while(z--){
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
    A->next = next;
    A = temp = prev;
    z = n/2;
    while(z--)
        temp = temp->next;
    if(n%2 == 1)
        temp = temp->next;
    z = n/2;
    while(z--){
        if(A->val != temp->val)
            return 0;
        A = A->next;
        temp =  temp->next;
    }
    return 1;
}
